using Content.Client.UserInterface.Controls;
using Content.Shared.Cryotron;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;

namespace Content.Client.Cryotron.UI;

[GenerateTypedNameReferences]
public sealed partial class CryotronWindow : FancyWindow
{
    [Dependency] private readonly IGameTiming _timing = default!;

    public event Action? OnPermanentSleepButtonPressed;
    public event Action? OnTemporarySleepButtonPressed;
    public event Action? OnCancelButtonPressed;
    public event Action? OnWakeUpButtonPressed;

    public CryotronWindow(EntityUid uid)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        //EntityView.SetEntity(gen);
        //EntityView.SpriteOffset = false;

        PermanentSleepButton.OnPressed += _ => OnPermanentSleepButtonPressed?.Invoke();
        TemporarySleepButton.OnPressed += _ => OnTemporarySleepButtonPressed?.Invoke();
        CancelButton.OnPressed += _ => OnCancelButtonPressed?.Invoke();
        //WakeUp.OnPressed += _ => OnWakeUpPressed?.Invoke();
    }

    public void UpdateState(CryotronUiState state)
    {
        //not inside yet
        //short cooldown on buttons before enter
        if (!state.ButtonEnableEndTime.HasValue || _timing.CurTime > state.ButtonEnableEndTime)
        {
            PermanentSleepButton.Text = Loc.GetString("cryotron-permanent-button");
            PermanentSleepButton.Disabled = false;
            TemporarySleepButton.Text = Loc.GetString("cryotron-temporary-button");
            TemporarySleepButton.Disabled = false;
            return;
        }
        else
        {
            var buttonTimeLeft = state.ButtonEnableEndTime.Value - _timing.CurTime;

            //var timeString = $"{buttonTimeLeft.Seconds:0}:{buttonTimeLeft.Milliseconds:00}";
            PermanentSleepButton.Text = buttonTimeLeft.ToString();
            PermanentSleepButton.Disabled = true;
            TemporarySleepButton.Text = buttonTimeLeft.ToString();
            TemporarySleepButton.Disabled = true;
        }

        //inside

        //var waketimeLeft = state.WakeUpEndTime - _timing.CurTime;
        //timeString = $"{waketimeLeft.Minutes:0}:{waketimeLeft.Seconds:00}";
        //TemporarySleepButton.SetMarkup(waketimeLeft));

        //show timer to exit
    }

    private void UpdateButtonTimer()
    {
        if (!state.ButtonEnableEndTime.HasValue || _timing.CurTime > state.ButtonEnableEndTime)
        {
            PermanentSleepButton.Text = Loc.GetString("cryotron-permanent-button");
            PermanentSleepButton.Disabled = false;
            TemporarySleepButton.Text = Loc.GetString("cryotron-temporary-button");
            TemporarySleepButton.Disabled = false;
            return;
        }
        else
        {
            var buttonTimeLeft = state.ButtonEnableEndTime.Value - _timing.CurTime;

            //var timeString = $"{buttonTimeLeft.Seconds:0}:{buttonTimeLeft.Milliseconds:00}";
            PermanentSleepButton.Text = buttonTimeLeft.ToString();
            PermanentSleepButton.Disabled = true;
            TemporarySleepButton.Text = buttonTimeLeft.ToString();
            TemporarySleepButton.Disabled = true;
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);


    }
}
