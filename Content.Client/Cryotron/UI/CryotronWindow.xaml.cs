using Content.Shared.Cryotron;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;

namespace Content.Client.Cryotron.UI;

[GenerateTypedNameReferences]
public sealed partial class CryotronWindow : FancyWindow
{
    [Dependency] private readonly IGameTiming _timing = default!;

    public event Action? OnPermanentSleepButtonPressed;
    public event Action? OnTemporarySleepButtonPressed;

    private TimeSpan _buttonEnableEndTime = TimeSpan.Zero;

    public CryotronWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        PermanentSleepButton.OnPressed += _ => OnPermanentSleepButtonPressed?.Invoke();
        TemporarySleepButton.OnPressed += _ => OnTemporarySleepButtonPressed?.Invoke();
    }

    public void UpdateState(CryotronUiState state)
    {
        if(!state.InsideCryotron)
        {
            if (state.ButtonEnableEndTime.HasValue)
                _buttonEnableEndTime = state.ButtonEnableEndTime.Value;
            UpdateButtonTimer();

            var timeString = $"{state.TotalSleepTime.Minutes:0}:{state.TotalSleepTime.Seconds:00}";
            TemporaryDescriptionLabel.Text = Loc.GetString("cryotron-temporary-desc", ("time", timeString));
        }
    }

    private void UpdateButtonTimer()
    {
        if (_timing.CurTime > _buttonEnableEndTime)
        {
            PermanentSleepButton.Text = Loc.GetString("cryotron-permanent-button");
            PermanentSleepButton.Disabled = false;
            TemporarySleepButton.Text = Loc.GetString("cryotron-temporary-button");
            TemporarySleepButton.Disabled = false;
        }
        else
        {
            var timeLeft = _buttonEnableEndTime - _timing.CurTime;
            var timeString = $"{timeLeft.Seconds:0}.{timeLeft.Milliseconds:0}";
            PermanentSleepButton.Text = timeString.ToString();
            PermanentSleepButton.Disabled = true;
            TemporarySleepButton.Text = timeString.ToString();
            TemporarySleepButton.Disabled = true;
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        UpdateButtonTimer();
    }
}
