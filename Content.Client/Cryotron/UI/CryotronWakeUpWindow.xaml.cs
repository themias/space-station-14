using Content.Shared.Cryotron;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;

namespace Content.Client.Cryotron.UI;

[GenerateTypedNameReferences]
public sealed partial class CryotronWakeUpWindow : FancyWindow
{
    [Dependency] private readonly IGameTiming _timing = default!;

    public event Action? OnWakeUpButtonPressed;

    private TimeSpan _wakeUpEndTime = TimeSpan.Zero;

    public CryotronWakeUpWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        WakeUpButton.OnPressed += _ => OnWakeUpButtonPressed?.Invoke();
    }

    public void UpdateState(CryotronUiState state)
    {
        if(state.InsideCryotron)
        {
            if (state.WakeUpEndTime.HasValue)
                _wakeUpEndTime = state.WakeUpEndTime.Value;
            UpdateWakeUpTimer();
        }
    }

    private void UpdateWakeUpTimer()
    {
        if (_timing.CurTime > _wakeUpEndTime)
        {
            WakeUpButton.Text = Loc.GetString("cryotron-wakeup-button", ("remainingTime", ""));
            WakeUpButton.Disabled = false;
        }
        else
        {
            var timeLeft = _wakeUpEndTime - _timing.CurTime;
            var timeString = $" ({timeLeft.Minutes:0}.{timeLeft.Seconds:00})";
            WakeUpButton.Text = Loc.GetString("cryotron-wakeup-button", ("remainingTime", timeString));
            WakeUpButton.Disabled = true;
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        UpdateWakeUpTimer();
    }
}
